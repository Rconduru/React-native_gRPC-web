// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: alert.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	SendAlert(ctx context.Context, in *SendAlertRequest, opts ...grpc.CallOption) (*SendAlertResponse, error)
	ListenAlert(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AlertService_ListenAlertClient, error)
}

type alertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) SendAlert(ctx context.Context, in *SendAlertRequest, opts ...grpc.CallOption) (*SendAlertResponse, error) {
	out := new(SendAlertResponse)
	err := c.cc.Invoke(ctx, "/mobilePoc.alert.AlertService/SendAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) ListenAlert(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AlertService_ListenAlertClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlertService_ServiceDesc.Streams[0], "/mobilePoc.alert.AlertService/ListenAlert", opts...)
	if err != nil {
		return nil, err
	}
	x := &alertServiceListenAlertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlertService_ListenAlertClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type alertServiceListenAlertClient struct {
	grpc.ClientStream
}

func (x *alertServiceListenAlertClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations must embed UnimplementedAlertServiceServer
// for forward compatibility
type AlertServiceServer interface {
	SendAlert(context.Context, *SendAlertRequest) (*SendAlertResponse, error)
	ListenAlert(*emptypb.Empty, AlertService_ListenAlertServer) error
	mustEmbedUnimplementedAlertServiceServer()
}

// UnimplementedAlertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (UnimplementedAlertServiceServer) SendAlert(context.Context, *SendAlertRequest) (*SendAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlert not implemented")
}
func (UnimplementedAlertServiceServer) ListenAlert(*emptypb.Empty, AlertService_ListenAlertServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenAlert not implemented")
}
func (UnimplementedAlertServiceServer) mustEmbedUnimplementedAlertServiceServer() {}

// UnsafeAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServiceServer will
// result in compilation errors.
type UnsafeAlertServiceServer interface {
	mustEmbedUnimplementedAlertServiceServer()
}

func RegisterAlertServiceServer(s grpc.ServiceRegistrar, srv AlertServiceServer) {
	s.RegisterService(&AlertService_ServiceDesc, srv)
}

func _AlertService_SendAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).SendAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mobilePoc.alert.AlertService/SendAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).SendAlert(ctx, req.(*SendAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_ListenAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertServiceServer).ListenAlert(m, &alertServiceListenAlertServer{stream})
}

type AlertService_ListenAlertServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type alertServiceListenAlertServer struct {
	grpc.ServerStream
}

func (x *alertServiceListenAlertServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// AlertService_ServiceDesc is the grpc.ServiceDesc for AlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mobilePoc.alert.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAlert",
			Handler:    _AlertService_SendAlert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenAlert",
			Handler:       _AlertService_ListenAlert_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alert.proto",
}
